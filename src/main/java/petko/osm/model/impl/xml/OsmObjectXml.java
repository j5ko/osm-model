//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.09.14 at 01:52:08 PM MESZ 
//

package petko.osm.model.impl.xml;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import javax.xml.datatype.DatatypeConfigurationException;

import petko.osm.model.facade.OSMObjectType;
import petko.osm.model.facade.OsmObject;
import petko.osm.model.facade.OsmTag;

/**
 * <p>
 * Java class for node complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 * 
 * <pre>
 * &lt;complexType name="node">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="tag" type="{}tag" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}unsignedLong" />
 *       &lt;attribute name="lat" use="required" type="{http://www.w3.org/2001/XMLSchema}float" />
 *       &lt;attribute name="lon" use="required" type="{http://www.w3.org/2001/XMLSchema}float" />
 *       &lt;attribute name="timestamp" type="{http://www.w3.org/2001/XMLSchema}dateTime" />
 *       &lt;attribute name="uid" type="{http://www.w3.org/2001/XMLSchema}unsignedLong" />
 *       &lt;attribute name="user" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="visible" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="version" type="{http://www.w3.org/2001/XMLSchema}unsignedLong" />
 *       &lt;attribute name="changeset" use="required" type="{http://www.w3.org/2001/XMLSchema}unsignedLong" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
public class OsmObjectXml implements OsmObject {
	@XmlAttribute(name = "id", required = true)
	private Long id;
	@XmlAttribute(name = "uid")
	private Long uid;
	@XmlAttribute(name = "user")
	private String user;
	@XmlAttribute(name = "visible")
	private Boolean visible;
	@XmlAttribute(name = "version")
	@XmlSchemaType(name = "unsignedLong")
	private Long version;
	@XmlAttribute(name = "changeset", required = true)
	@XmlSchemaType(name = "unsignedLong")
	private Long changeset;
	@XmlAttribute(name = "timestamp")
	@XmlSchemaType(name = "dateTime")
	@XmlJavaTypeAdapter(DateAdapter.class)
	private Date timestamp;
	@XmlElement(name = "tag", type = OsmTagXml.class)
	private List<OsmTag> tags = new ArrayList<>();

	public OsmObjectXml() {
	}

	public OsmObjectXml(OsmObject osmObject) throws DatatypeConfigurationException {
		this.id = osmObject.getId();
		this.uid = osmObject.getUid();
		this.user = osmObject.getUser();
		this.visible = osmObject.isVisible();
		this.version = osmObject.getVersion();
		this.changeset = osmObject.getChangeset();
		this.timestamp = osmObject.getTimestamp();
		createTags(osmObject.getTags());
	}

	private void createTags(List<OsmTag> tagsBase) {
		if (tagsBase != null) {
			for (OsmTag osmTagBase : tagsBase) {
				OsmTagXml osmTagXml = new OsmTagXml(osmTagBase.getKey(), osmTagBase.getValue());
				this.tags.add(osmTagXml);
			}
		}
	}

	@Override
	public Date getTimestamp() {
		return timestamp;
	}

	public void setTimestamp(Date timestampXml) {
		this.timestamp = timestampXml;
	}

	@Override
	public List<OsmTag> getTags() {
		return tags;
	}

	public void setTags(List<OsmTag> tags) {
		this.tags = tags;
	}

	@Override
	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@Override
	public Long getUid() {
		return uid;
	}

	public void setUid(Long uid) {
		this.uid = uid;
	}

	@Override
	public String getUser() {
		return user;
	}

	public void setUser(String user) {
		this.user = user;
	}

	@Override
	public Boolean isVisible() {
		return visible;
	}

	public void setVisible(Boolean visible) {
		this.visible = visible;
	}

	@Override
	public Long getVersion() {
		return version;
	}

	public void setVersion(Long version) {
		this.version = version;
	}

	@Override
	public Long getChangeset() {
		return changeset;
	}

	public void setChangeset(Long changeset) {
		this.changeset = changeset;
	}

	@Override
	public OSMObjectType getType() {
		return OSMObjectType.NODE;
	}

	@Override
	public String getTagValue(String tagName) {
		if (this.tags != null) {
			for (OsmTag osmTag : tags) {
				if (tagName.equals(osmTag.getKey())) {
					return osmTag.getValue();
				}
			}
		}
		return null;
	}
}